glm_pred[glm.probs>.5]="Forged BankNote"
glm_pred = as.factor(glm_pred)
plot(BankTrain$x3, BankTrain$x1, pch = as.integer(glm_pred), col = as.integer(glm_pred))
x = linspace(min(BankTrain$x3),max(BankTrain$x3),1000)
beta = summary(glm.fit)$coef[,1]
glm_probs = predict(training_glm, type="response")
glm_pred=rep("Real Banknote",960)
glm_pred[glm.probs>.5]="Forged BankNote"
glm_pred = as.factor(glm_pred)
plot(BankTrain$x3, BankTrain$x1, pch = as.integer(glm_pred), col = as.integer(glm_pred))
x = seq(min(BankTrain$x3),max(BankTrain$x3),1000)
beta = summary(glm.fit)$coef[,1]
y = -beta[3]/beta[2]*x -beta[1]/beta[2]
glm_probs = predict(training_glm, type="response")
glm_pred=rep("Real Banknote",960)
glm_pred[glm.probs>.5]="Forged BankNote"
glm_pred = as.factor(glm_pred)
plot(BankTrain$x3, BankTrain$x1, pch = as.integer(glm_pred), col = as.integer(glm_pred))
x = seq(from=min(BankTrain$x3),to=max(BankTrain$x3),1000)
beta = summary(glm.fit)$coef[,1]
y = -beta[3]/beta[2]*x -beta[1]/beta[2]
min(BankTrain$x3)
max(BankTrain$x3)
glm_probs = predict(training_glm, type="response")
glm_pred=rep("Real Banknote",960)
glm_pred[glm.probs>.5]="Forged BankNote"
glm_pred = as.factor(glm_pred)
plot(BankTrain$x3, BankTrain$x1, pch = as.integer(glm_pred), col = as.integer(glm_pred))
x = seq(from=-6,to=18,n=1000)
beta = summary(glm.fit)$coef[,1]
y = -beta[3]/beta[2]*x -beta[1]/beta[2]
glm_probs = predict(training_glm, type="response")
glm_pred=rep("Real Banknote",960)
glm_pred[glm.probs>.5]="Forged BankNote"
glm_pred = as.factor(glm_pred)
plot(BankTrain$x3, BankTrain$x1, pch = as.integer(glm_pred), col = as.integer(glm_pred))
x = seq(from=-6,to=18,1000)
beta = summary(glm.fit)$coef[,1]
y = -beta[3]/beta[2]*x -beta[1]/beta[2]
glm_probs = predict(training_glm, type="response")
glm_pred=rep("Real Banknote",960)
glm_pred[glm.probs>.5]="Forged BankNote"
glm_pred = as.factor(glm_pred)
plot(BankTrain$x3, BankTrain$x1, pch = as.integer(glm_pred), col = as.integer(glm_pred))
x = seq(from=-6,to=18,0.1)
beta = summary(glm.fit)$coef[,1]
y = -beta[3]/beta[2]*x -beta[1]/beta[2]
glm_probs = predict(training_glm, type="response")
glm_pred=rep("Real Banknote",960)
glm_pred[glm.probs>.5]="Forged BankNote"
glm_pred = as.factor(glm_pred)
plot(BankTrain$x3, BankTrain$x1, pch = as.integer(glm_pred), col = as.integer(glm_pred))
x = seq(from=-6,to=18,0.01)
beta = summary(glm.fit)$coef[,1]
y = -beta[3]/beta[2]*x -beta[1]/beta[2]
glm_probs = predict(training_glm, type="response")
glm_pred=rep("Real Banknote",960)
glm_pred[glm.probs>.5]="Forged BankNote"
glm_pred = as.factor(glm_pred)
plot(BankTrain$x3, BankTrain$x1, pch = as.integer(glm_pred), col = as.integer(glm_pred))
x = seq(from=-6,to=18,0.01)
beta = summary(glm.fit)$coef[,1]
y = -beta[3]/beta[2]*x -beta[1]/beta[2]
lines(x,y,col="blue")
glm_probs = predict(training_glm, type="response")
glm_pred=rep("Real Banknote",960)
glm_pred[glm.probs>.5]="Forged BankNote"
glm_pred = as.factor(glm_pred)
plot(BankTrain$x3, BankTrain$x1, pch = as.integer(glm_pred), col = as.integer(glm_pred), main = "Bank Note Forgery Training Data", xlab = "Kurtosis of Wavelet Transformed Image", ylab = "Variance of Wavelet Transformed Image")
legend("topright",legend = glm_pred, pch = as.integer(glm_pred),col = as.integer(glm_pred),text.col = "black", horiz = FALSE)
x = seq(from=-6,to=18,0.01)
beta = summary(glm.fit)$coef[,1]
y = -beta[3]/beta[2]*x -beta[1]/beta[2]
lines(x,y,col="blue")
glm_probs = predict(training_glm, type="response")
glm_pred=rep("Real Banknote",960)
glm_pred[glm.probs>.5]="Forged BankNote"
glm_pred = as.factor(glm_pred)
plot(BankTrain$x3, BankTrain$x1, pch = as.integer(glm_pred), col = as.integer(glm_pred), main = "Bank Note Forgery Training Data", xlab = "Kurtosis of Wavelet Transformed Image", ylab = "Variance of Wavelet Transformed Image")
legend("topright",legend = as.int(glm_pred), pch = as.integer(glm_pred),col = as.integer(glm_pred),text.col = "black", horiz = FALSE)
glm_probs = predict(training_glm, type="response")
glm_pred=rep("Real Banknote",960)
glm_pred[glm.probs>.5]="Forged BankNote"
glm_pred = as.factor(glm_pred)
plot(BankTrain$x3, BankTrain$x1, pch = as.integer(glm_pred), col = as.integer(glm_pred), main = "Bank Note Forgery Training Data", xlab = "Kurtosis of Wavelet Transformed Image", ylab = "Variance of Wavelet Transformed Image")
legend("topright",legend = c("Real", "Forged"), pch = as.integer(glm_pred),col = as.integer(glm_pred),text.col = "black",horiz = FALSE)
x = seq(from=-6,to=18,0.01)
beta = summary(glm.fit)$coef[,1]
y = -beta[3]/beta[2]*x -beta[1]/beta[2]
lines(x,y,col="blue")
glm_probs = predict(training_glm, type="response")
glm_pred=rep("Real Banknote",960)
glm_pred[glm.probs>.5]="Forged BankNote"
glm_pred = as.factor(glm_pred)
plot(BankTrain$x3, BankTrain$x1, pch = as.integer(glm_pred), col = as.integer(glm_pred), main = "Bank Note Forgery Training Data", xlab = "Kurtosis of Wavelet Transformed Image", ylab = "Variance of Wavelet Transformed Image")
legend("topright",legend = c("Real", "Forged"), pch = c(1,2),col = as.integer(glm_pred),text.col = "black",horiz = FALSE)
x = seq(from=-6,to=18,0.01)
beta = summary(glm.fit)$coef[,1]
y = -beta[3]/beta[2]*x -beta[1]/beta[2]
lines(x,y,col="blue")
glm_probs = predict(training_glm, type="response")
glm_pred=rep("Real Banknote",960)
glm_pred[glm.probs>.5]="Forged BankNote"
glm_pred = as.factor(glm_pred)
plot(BankTrain$x3, BankTrain$x1, pch = as.integer(glm_pred), col = as.integer(glm_pred), main = "Bank Note Forgery Training Data", xlab = "Kurtosis of Wavelet Transformed Image", ylab = "Variance of Wavelet Transformed Image")
legend("topright",legend = c("Real", "Forged"), pch = c(1,2),col = c(1,2),text.col = "black",horiz = FALSE)
x = seq(from=-6,to=18,0.01)
beta = summary(glm.fit)$coef[,1]
y = -beta[3]/beta[2]*x -beta[1]/beta[2]
lines(x,y,col="blue")
glm_probs = predict(training_glm, type="response")
glm_pred=rep("Real Banknote",960)
glm_pred[glm.probs>.5]="Forged BankNote"
glm_pred = as.factor(glm_pred)
plot(BankTrain$x3, BankTrain$x1, pch = as.integer(glm_pred), col = as.integer(glm_pred), main = "Bank Note Forgery Training Data", xlab = "Kurtosis of Wavelet Transformed Image", ylab = "Variance of Wavelet Transformed Image")
legend("topright",legend = c("Real", "Forged"), pch = c(1,2,'l'),col = c(1,2),text.col = "black",horiz = FALSE)
x = seq(from=-6,to=18,0.01)
beta = summary(glm.fit)$coef[,1]
y = -beta[3]/beta[2]*x -beta[1]/beta[2]
lines(x,y,col="blue")
glm_probs = predict(training_glm, type="response")
glm_pred=rep("Real Banknote",960)
glm_pred[glm.probs>.5]="Forged BankNote"
glm_pred = as.factor(glm_pred)
plot(BankTrain$x3, BankTrain$x1, pch = as.integer(glm_pred), col = as.integer(glm_pred), main = "Bank Note Forgery Training Data", xlab = "Kurtosis of Wavelet Transformed Image", ylab = "Variance of Wavelet Transformed Image")
legend("topright",legend = c("Real", "Forged", "Decision Boundary"), pch = c(1,2,0),col = c(1,2),text.col = "black",horiz = FALSE)
x = seq(from=-6,to=18,0.01)
beta = summary(glm.fit)$coef[,1]
y = -beta[3]/beta[2]*x -beta[1]/beta[2]
lines(x,y,col="blue")
glm_probs = predict(training_glm, type="response")
glm_pred=rep("Real Banknote",960)
glm_pred[glm.probs>.5]="Forged BankNote"
glm_pred = as.factor(glm_pred)
plot(BankTrain$x3, BankTrain$x1, pch = as.integer(glm_pred), col = as.integer(glm_pred), main = "Bank Note Forgery Training Data", xlab = "Kurtosis of Wavelet Transformed Image", ylab = "Variance of Wavelet Transformed Image")
legend("topright",legend = c("Real", "Forged", "Decision Boundary"), pch = c(1,2,'l'),col = c(1,2),text.col = "black",horiz = FALSE)
x = seq(from=-6,to=18,0.01)
beta = summary(glm.fit)$coef[,1]
y = -beta[3]/beta[2]*x -beta[1]/beta[2]
lines(x,y,col="blue")
glm_probs = predict(training_glm, type="response")
glm_pred=rep("Real Banknote",960)
glm_pred[glm.probs>.5]="Forged BankNote"
glm_pred = as.factor(glm_pred)
plot(BankTrain$x3, BankTrain$x1, pch = as.integer(glm_pred), col = as.integer(glm_pred), main = "Bank Note Forgery Training Data p(x) = 0.5", xlab = "Kurtosis of Wavelet Transformed Image", ylab = "Variance of Wavelet Transformed Image")
legend("topright",legend = c("Real", "Forged"), pch = c(1,2),col = c(1,2),text.col = "black",horiz = FALSE)
x = seq(from=-6,to=18,0.01)
beta = summary(glm.fit)$coef[,1]
y = -beta[3]/beta[2]*x -beta[1]/beta[2]
lines(x,y,col="blue")
glm_probs = predict(training_glm, type="response")
glm_pred=rep("Real Banknote",960)
glm_pred[glm.probs>.5]="Forged BankNote"
glm_pred = as.factor(glm_pred)
plot(BankTrain$x3, BankTrain$x1, pch = as.integer(glm_pred), col = as.integer(glm_pred), main = "Bank Note Forgery Training Data; p(x) = 0.5", xlab = "Kurtosis of Wavelet Transformed Image", ylab = "Variance of Wavelet Transformed Image")
legend("topright",legend = c("Real", "Forged"), pch = c(1,2),col = c(1,2),text.col = "black",horiz = FALSE)
x = seq(from=-6,to=18,0.01)
beta = summary(glm.fit)$coef[,1]
y = -beta[3]/beta[2]*x -beta[1]/beta[2]
lines(x,y,col="blue")
glm_pred
glm_probs
table(glm.pred,y)
table(glm_pred,y)
table(glm_pred,BankTrain$y)
glm_probs = predict(training_glm, type="response")
glm_pred=rep("Real Banknote",960)
glm_pred[glm.probs>.5]="Forged Banknote"
glm_pred = as.factor(glm_pred, levels = c("Real Banknote", "Forged Banknote"))
glm_probs = predict(training_glm, type="response")
glm_pred=rep("Real Banknote",960)
glm_pred[glm.probs>.5]="Forged Banknote"
glm_pred = factor(glm_pred, levels = c("Real Banknote", "Forged Banknote"))
plot(BankTrain$x3, BankTrain$x1, pch = as.integer(glm_pred), col = as.integer(glm_pred), main = "Bank Note Forgery Training Data; p(x) = 0.5", xlab = "Kurtosis of Wavelet Transformed Image", ylab = "Variance of Wavelet Transformed Image")
legend("topright",legend = c("Real", "Forged"), pch = c(1,2),col = c(1,2),text.col = "black",horiz = FALSE)
x = seq(from=-6,to=18,0.01)
beta = summary(glm.fit)$coef[,1]
y = -beta[3]/beta[2]*x -beta[1]/beta[2]
lines(x,y,col="blue")
table(glm_pred,BankTrain$y)
(455 + 389)/960
help("predict")
test_probs = predict(training_glm,BankTest,type = "response")
test_glm_pred=rep("Real Banknote",412)
test_glm_pred[test_probs>.5]="Forged Banknote"
test_glm_pred = factor(test_glm_pred, levels = c("Real Banknote", "Forged Banknote"))
table(test_glm_pred,BankTest$y)
mean(test_glm_pred==BankTest$y)
(204 + 152)/412
test_probs = predict(training_glm,BankTest,type = "response")
test_glm_pred=rep("Real Banknote",412)
test_glm_pred[test_probs>.6]="Forged Banknote"
test_glm_pred = factor(test_glm_pred, levels = c("Real Banknote", "Forged Banknote"))
table(test_glm_pred,BankTest$y)
test_probs = predict(training_glm,BankTest,type = "response")
test_glm_pred=rep("Real Banknote",412)
test_glm_pred[test_probs>.6]="Forged Banknote"
test_glm_pred = factor(test_glm_pred, levels = c("Real Banknote", "Forged Banknote"))
table(test_glm_pred,BankTest$y)
mean(test_glm_pred==BankTest$y)
table(test_glm_pred,BankTest$y)
(210 + 141)/412
test_probs = predict(training_glm,BankTest,type = "response")
test_glm_pred=rep("Real Banknote",412)
test_glm_pred[test_probs>.3]="Forged Banknote"
test_glm_pred = factor(test_glm_pred, levels = c("Real Banknote", "Forged Banknote"))
table(test_glm_pred,BankTest$y)
(183 + 171)/(412)
library(MASS)
lda_fit=lda(y~x1+x3, data=BankTrain)
lda.fit
library(MASS)
lda_fit=lda(y~x1+x3, data=BankTrain)
lda_fit
library(MASS)
lda_fit=lda(y~x1+x3, data=BankTrain)
lda_fit
plot(lda.fit)
library(MASS)
lda_fit=lda(y~x1+x3, data=BankTrain)
lda_fit
plot(lda_fit)
glm_probs = predict(training_glm, type="response")
glm_pred=rep("Real Banknote",960)
glm_pred[glm_probs>.5]="Forged Banknote"
glm_pred = factor(glm_pred, levels = c("Real Banknote", "Forged Banknote"))
plot(BankTrain$x3, BankTrain$x1, pch = as.integer(glm_pred), col = as.integer(glm_pred), main = "Bank Note Forgery Training Data; p(x) = 0.5", xlab = "Kurtosis of Wavelet Transformed Image", ylab = "Variance of Wavelet Transformed Image")
legend("topright",legend = c("Real", "Forged"), pch = c(1,2),col = c(1,2),text.col = "black",horiz = FALSE)
x = seq(from=-6,to=18,0.01)
beta = summary(glm.fit)$coef[,1]
y = -beta[3]/beta[2]*x -beta[1]/beta[2]
lines(x,y,col="blue")
glm_probs = predict(training_glm, type="response")
glm_pred=rep("Real Banknote",960)
glm_pred[glm_probs>.5]="Forged Banknote"
glm_pred = factor(glm_pred, levels = c("Real Banknote", "Forged Banknote"))
plot(BankTrain$x3, BankTrain$x1, pch = as.integer(glm_pred), col = as.integer(glm_pred), main = "Bank Note Forgery Training Data; p(x) = 0.5", xlab = "Kurtosis of Wavelet Transformed Image", ylab = "Variance of Wavelet Transformed Image")
legend("topright",legend = c("Real", "Forged"), pch = c(1,2),col = c(1,2),text.col = "black",horiz = FALSE)
x = seq(from=-6,to=18,0.01)
beta = summary(glm.fit)$coef[,1]
y = -beta[3]/beta[2]*x -beta[1]/beta[2]
lines(x,y,col="blue")
#Start by defining the coefficients
beta_0 = -16
beta_1 = 1.4
beta_2 = 0.3
x1 = 5
x2 = 36
#Now evaluate the function
prob = exp(beta_0 + beta_1 * x1 + beta_2 * x2) / (1 + exp(beta_0 + beta_1 * x1 + beta_2 * x2))
X1 = (-beta_0 - beta_2*18)/beta_1
# Load in the data
BankTrain=read.csv("BankTrain.csv",header=T,na.strings="?")
BankTest=read.csv("BankTest.csv",header=T,na.strings="?")
#Get the model
training_glm=glm(y~x1+x3, data=BankTrain, family=binomial)
summary(training_glm)
glm_probs = predict(training_glm, type="response")
glm_pred=rep("Real Banknote",960)
glm_pred[glm_probs>.5]="Forged Banknote"
glm_pred = factor(glm_pred, levels = c("Real Banknote", "Forged Banknote"))
plot(BankTrain$x3, BankTrain$x1, pch = as.integer(glm_pred), col = as.integer(glm_pred), main = "Bank Note Forgery Training Data; p(x) = 0.5", xlab = "Kurtosis of Wavelet Transformed Image", ylab = "Variance of Wavelet Transformed Image")
legend("topright",legend = c("Real", "Forged"), pch = c(1,2),col = c(1,2),text.col = "black",horiz = FALSE)
x = seq(from=-6,to=18,0.01)
beta = summary(glm.fit)$coef[,1]
y = -beta[3]/beta[2]*x -beta[1]/beta[2]
lines(x,y,col="blue")
glm_probs = predict(training_glm, type="response")
glm_pred=rep("Real Banknote",960)
glm_pred[glm_probs>.5]="Forged Banknote"
glm_pred = factor(glm_pred, levels = c("Real Banknote", "Forged Banknote"))
plot(BankTrain$x3, BankTrain$x1, pch = as.integer(glm_pred), col = as.integer(glm_pred), main = "Bank Note Forgery Training Data; p(x) = 0.5", xlab = "Kurtosis of Wavelet Transformed Image", ylab = "Variance of Wavelet Transformed Image")
legend("topright",legend = c("Real", "Forged"), pch = c(1,2),col = c(1,2),text.col = "black",horiz = FALSE)
x = seq(from=-6,to=18,0.01)
beta = summary(glm.fit)$coef[,1]
y = -beta[3]/beta[2]*x -beta[1]/beta[2]
lines(x,y,col="blue")
glm_probs = predict(training_glm, type="response")
glm_pred=rep("Real Banknote",960)
glm_pred[glm_probs>.5]="Forged Banknote"
glm_pred = factor(glm_pred, levels = c("Real Banknote", "Forged Banknote"))
plot(BankTrain$x3, BankTrain$x1, pch = as.integer(glm_pred), col = as.integer(glm_pred), main = "Bank Note Forgery Training Data; p(x) = 0.5", xlab = "Kurtosis of Wavelet Transformed Image", ylab = "Variance of Wavelet Transformed Image")
legend("topright",legend = c("Real", "Forged"), pch = c(1,2),col = c(1,2),text.col = "black",horiz = FALSE)
x = seq(from=-6,to=18,0.01)
beta = summary(glm.fit)$coef[,1]
y = -beta[3]/beta[2]*x -beta[1]/beta[2]
lines(x,y,col="blue")
glm_probs = predict(training_glm, type="response")
glm_pred=rep("Real Banknote",960)
#lines(x,y,col="blue")
library(MASS)
lda_fit=lda(y~x1+x3, data=BankTrain)
lda_fit
plot(lda_fit)
lda_probs = predict(lda_fit,BankTest,type = "response")
lda_class=lda_probs$class
table(lda_class,BankTest$y)
lda_probs = predict(lda_fit,BankTest,type = "response")
lda_class=lda_probs$class
table(lda_class,BankTest$y)
mean(lda_class==BankTest$y)
qda.fit=qda(y~x1+x3, data=BankTrain)
qda.fit
qda_fit=qda(y~x1+x3, data=BankTrain)
qda_fit
plot(qda_fit)
qda_fit=qda(y~x1+x3, data=BankTrain)
qda_fit
qda_class=predict(qda_fit,BankTest)$class
table(qda_class,BankTest$y)
qda_fit=qda(y~x1+x3, data=BankTrain)
qda_fit
qda_class=predict(qda_fit,BankTest)$class
table(qda_class,BankTest$y)
mean(qda_class==BankTest$y)
mu_0 = 2
mu_1 = 0
sigma_2 = 4
pi_0 = 0.4
pi_1 = 1 - pi_0
numerator = (mu_1^2 - mu_2^2)/(2*sigma_2) + log(pi_1/pi_0)
mu_0 = 2
mu_1 = 0
sigma_2 = 4
pi_0 = 0.4
pi_1 = 1 - pi_0
numerator = (mu_1^2 - mu_0^2)/(2*sigma_2) + log(pi_1/pi_0)
denominator = (mu_0 - mu_1)/sigma_2
X = numerator/denominator
X
#Plot out the gaussians to see where they should cross (check of math)
x = seq(-5,5,length = 100)
pi_0 = 0.4
pi_1 = 1 - pi_0
mu_0 = 2
mu_1 = 0
sigma_2 = 4
#Define the functions
y_1 = pi_0*dnorm(x,mu_0,sqrt(sigma_2))
y_2 = pi_1*dnorm(x,mu_0,sqrt(sigma_2))
#Plot the curve out.
plot(x,y_1,col = "blue", lwd = 4 ,type  ='l', main = "Plot of pi_0f_0 and pi_1f_1",
xlab = "x", ylab = "pi_if_i(x)")
#Plot the second curve.
points(x, y_2, col="dark red", lwd = 4, type = 'l')
numerator = (mu_1^2 - mu_0^2)/(2*sigma_2) + log(pi_1/pi_0)
denominator = (mu_0 - mu_1)/sigma_2
X = numerator/denominator
X
#Plot out the gaussians to see where they should cross (check of math)
x = seq(-5,5,length = 100)
pi_0 = 0.4
pi_1 = 1 - pi_0
mu_0 = 2
mu_1 = 0
sigma_2 = 4
#Define the functions
y_1 = pi_0*dnorm(x,mu_0,sqrt(sigma_2))
y_2 = pi_1*dnorm(x,mu_1,sqrt(sigma_2))
#Plot the curve out.
plot(x,y_1,col = "blue", lwd = 4 ,type  ='l', main = "Plot of pi_0f_0 and pi_1f_1",
xlab = "x", ylab = "pi_if_i(x)")
#Plot the second curve.
points(x, y_2, col="dark red", lwd = 4, type = 'l')
numerator = (mu_1^2 - mu_0^2)/(2*sigma_2) + log(pi_1/pi_0)
denominator = (mu_0 - mu_1)/sigma_2
X = numerator/denominator
X
#Plot out the gaussians to see where they should cross (check of math)
x = seq(-10,10,length = 100)
pi_0 = 0.4
pi_1 = 1 - pi_0
mu_0 = 2
mu_1 = 0
sigma_2 = 4
#Define the functions
y_1 = pi_0*dnorm(x,mu_0,sqrt(sigma_2))
y_2 = pi_1*dnorm(x,mu_1,sqrt(sigma_2))
#Plot the curve out.
plot(x,y_1,col = "blue", lwd = 4 ,type  ='l', main = "Plot of pi_0f_0 and pi_1f_1",
xlab = "x", ylab = "pi_if_i(x)")
#Plot the second curve.
points(x, y_2, col="dark red", lwd = 4, type = 'l')
numerator = (mu_1^2 - mu_0^2)/(2*sigma_2) + log(pi_1/pi_0)
denominator = (mu_0 - mu_1)/sigma_2
X = numerator/denominator
X
#Plot out the gaussians to see where they should cross (check of math)
x = seq(-10,10,length = 100)
pi_0 = 0.4
pi_1 = 1 - pi_0
mu_0 = 2
mu_1 = 0
sigma_2 = 4
#Define the functions
y_1 = pi_0*dnorm(x,mu_0,sqrt(sigma_2))
y_2 = pi_1*dnorm(x,mu_1,sqrt(sigma_2))
#Plot the curve out.
plot(x,y_1,col = "blue", lwd = 4 ,type  ='l', main = "Plot of pi_0f_0 and pi_1f_1",
xlab = "x", ylab = "pi_if_i(x)")
#Plot the second curve.
points(x, y_2, col="dark red", lwd = 4, type = 'l')
numerator = (mu_0^2 - mu_1^2)/(2*sigma_2) + log(pi_1/pi_0)
denominator = (mu_0 - mu_1)/sigma_2
X = numerator/denominator
X
#Plot out the gaussians to see where they should cross (check of math)
x = seq(-10,10,length = 100)
pi_0 = 0.4
pi_1 = 1 - pi_0
mu_0 = 2
mu_1 = 0
sigma_2 = 4
#Define the functions
f_0 = pi_0*dnorm(x,mu_0,sqrt(sigma_2))
f_1 = pi_1*dnorm(x,mu_1,sqrt(sigma_2))
#Plot the curve out.
plot(x,f_0,col = "blue", lwd = 4 ,type  ='l', main = "Plot of pi_0f_0 and pi_1f_1",
xlab = "x", ylab = "pi_if_i(x)")
#Plot the second curve.
points(x, f_1, col="dark red", lwd = 4, type = 'l')
legend("topright",legend = c("Class 0", "Class 1"),
col = c("blue","dark red"),lwd = 4,
text.col = "black",
horiz = FALSE)
numerator = (mu_0^2 - mu_1^2)/(2*sigma_2) + log(pi_1/pi_0)
denominator = (mu_0 - mu_1)/sigma_2
X = numerator/denominator
X
#Plot out the gaussians to see where they should cross (check of math)
x = seq(-10,10,length = 100)
pi_0 = 0.4
pi_1 = 1 - pi_0
mu_0 = 0
mu_1 = 2
sigma_2 = 4
#Define the functions
f_0 = pi_0*dnorm(x,mu_0,sqrt(sigma_2))
f_1 = pi_1*dnorm(x,mu_1,sqrt(sigma_2))
#Plot the curve out.
plot(x,f_0,col = "blue", lwd = 4 ,type  ='l', main = "Plot of pi_0f_0 and pi_1f_1",
xlab = "x", ylab = "pi_if_i(x)")
#Plot the second curve.
points(x, f_1, col="dark red", lwd = 4, type = 'l')
legend("topright",legend = c("Class 0", "Class 1"),
col = c("blue","dark red"),lwd = 4,
text.col = "black",
horiz = FALSE)
numerator = (mu_0^2 - mu_1^2)/(2*sigma_2) + log(pi_1/pi_0)
denominator = (mu_0 - mu_1)/sigma_2
X = numerator/denominator
X
#Plot out the gaussians to see where they should cross (check of math)
x = seq(-5,5,length = 100)
pi_0 = 0.4
pi_1 = 1 - pi_0
mu_0 = 0
mu_1 = 2
sigma_2 = 4
#Define the functions
f_0 = pi_0*dnorm(x,mu_0,sqrt(sigma_2))
f_1 = pi_1*dnorm(x,mu_1,sqrt(sigma_2))
#Plot the curve out.
plot(x,f_0,col = "blue", lwd = 4 ,type  ='l', main = "Plot of pi_0f_0 and pi_1f_1",
xlab = "x", ylab = "pi_if_i(x)")
#Plot the second curve.
points(x, f_1, col="dark red", lwd = 4, type = 'l')
legend("topright",legend = c("Class 0", "Class 1"),
col = c("blue","dark red"),lwd = 4,
text.col = "black",
horiz = FALSE)
numerator = (mu_0^2 - mu_1^2)/(2*sigma_2) + log(pi_1/pi_0)
denominator = (mu_0 - mu_1)/sigma_2
X = numerator/denominator
X
pnorm((x,mu_0,sqrt(sigma_2))
pnorm(x,mu_0,sqrt(sigma_2))
x_1 = seq(-100,0.1890698,0.001)
x_1 = seq(-100,0.1890698,0.01)
x_1 = seq(-100,0.1890698,0.01)
x1
x_1 = seq(-100,0.1890698,0.01)
x_1
x_1 = seq(-5,0.1890698,0.01)
x_0 = seq(0.1890698,5,0.01)
#Estimate the integrals under the curve using the trapezoidal rule.
delta_x = 0.01
x_1 = seq(-5,0.1890698,delta_x)
x_0 = seq(0.1890698,5,delta_x)
x_1[0]
x_1[1]
x_1[end]
x_1[-1]
x_1[length(x_1)]
#Estimate the integrals under the curve using the trapezoidal rule.
delta_x = 0.01
x_1 = seq(-5,0.1890698,delta_x)
x_0 = seq(0.1890698,5,delta_x)
int_1 = delta_x/2*(x_1[1] + x_1[length(x_1)] + 2*sum(x_1[1:length(x_1)-1]))
#Given the boundary value compute the integral
int_1 = pnorm(X,mu_1,sigma_2)
int_2 = 1 - pnorm(X,mu_0,sigma_2)
#Given the boundary value compute the integral
int_1 = pnorm(X,mu_1,sigma_2)
int_0 = 1 - pnorm(X,mu_0,sigma_2)
error_rate = pi_1*int_1 + pi_0*int_0
error_rate
#Given the boundary value compute the integral
int_1 = pnorm(X,mu_1,sigma_2)
int_0 = 1 - pnorm(X,mu_0,sigma_2)
error_rate = pi_1*int_1 + pi_0*int_0
error_rate
